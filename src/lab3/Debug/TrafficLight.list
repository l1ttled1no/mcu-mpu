
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bb4  08002bb4  00003bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  000040bc  2**0
                  CONTENTS
  4 .ARM          00000000  08002bd8  08002bd8  000040bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bd8  08002bd8  000040bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00003bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00003bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08002be0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000bc  08002c9c  000040bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002c9c  0000417c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000875c  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf1  00000000  00000000  0000c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  0000ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dcb  00000000  00000000  0000f677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37a  00000000  00000000  00026442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082533  00000000  00000000  000327bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002928  00000000  00000000  000b4d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b765c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b9c 	.word	0x08002b9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08002b9c 	.word	0x08002b9c

0800014c <isButtonNoPressed>:
int KeyReg0[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};
int KeyReg1[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};
int KeyReg2[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};
int KeyReg3[NO_BUTTON] = {RELEASED, RELEASED, RELEASED};

int isButtonNoPressed(int no){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonFlag[no] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonNoPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonNoPressed+0x22>
		buttonFlag[no] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonNoPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonNoPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d8 	.word	0x200000d8

08000180 <buttonRead>:

void buttonRead(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_BUTTON; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e078      	b.n	800027e <buttonRead+0xfe>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a40      	ldr	r2, [pc, #256]	@ (8000290 <buttonRead+0x110>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493f      	ldr	r1, [pc, #252]	@ (8000294 <buttonRead+0x114>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a3e      	ldr	r2, [pc, #248]	@ (8000298 <buttonRead+0x118>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493a      	ldr	r1, [pc, #232]	@ (8000290 <buttonRead+0x110>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(sw0_GPIO_Port, sw0_Pin << i);
 80001ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	fa02 f303 	lsl.w	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	4619      	mov	r1, r3
 80001ba:	4838      	ldr	r0, [pc, #224]	@ (800029c <buttonRead+0x11c>)
 80001bc:	f001 fcc0 	bl	8001b40 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a34      	ldr	r2, [pc, #208]	@ (8000298 <buttonRead+0x118>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001cc:	4a30      	ldr	r2, [pc, #192]	@ (8000290 <buttonRead+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4930      	ldr	r1, [pc, #192]	@ (8000298 <buttonRead+0x118>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d14b      	bne.n	8000278 <buttonRead+0xf8>
 80001e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000290 <buttonRead+0x110>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	492a      	ldr	r1, [pc, #168]	@ (8000294 <buttonRead+0x114>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d141      	bne.n	8000278 <buttonRead+0xf8>
			if (KeyReg2[i] != KeyReg3[i]){ //reg2 != reg3
 80001f4:	4a27      	ldr	r2, [pc, #156]	@ (8000294 <buttonRead+0x114>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4928      	ldr	r1, [pc, #160]	@ (80002a0 <buttonRead+0x120>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d018      	beq.n	800023a <buttonRead+0xba>
				KeyReg3[i] = KeyReg2[i];
 8000208:	4a22      	ldr	r2, [pc, #136]	@ (8000294 <buttonRead+0x114>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4923      	ldr	r1, [pc, #140]	@ (80002a0 <buttonRead+0x120>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg0[i] == PRESSED){
 8000218:	4a1f      	ldr	r2, [pc, #124]	@ (8000298 <buttonRead+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d129      	bne.n	8000278 <buttonRead+0xf8>
					timeout[i] = 100;
 8000224:	4a1f      	ldr	r2, [pc, #124]	@ (80002a4 <buttonRead+0x124>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2164      	movs	r1, #100	@ 0x64
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonFlag[i] = 1;
 800022e:	4a1e      	ldr	r2, [pc, #120]	@ (80002a8 <buttonRead+0x128>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2101      	movs	r1, #1
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000238:	e01e      	b.n	8000278 <buttonRead+0xf8>
				}
			}
			else { //reg2 = reg3
				timeout[i]--;
 800023a:	4a1a      	ldr	r2, [pc, #104]	@ (80002a4 <buttonRead+0x124>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4917      	ldr	r1, [pc, #92]	@ (80002a4 <buttonRead+0x124>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeout[i] == 0){
 800024c:	4a15      	ldr	r2, [pc, #84]	@ (80002a4 <buttonRead+0x124>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d10f      	bne.n	8000278 <buttonRead+0xf8>
					timeout[i] = 10;
 8000258:	4a12      	ldr	r2, [pc, #72]	@ (80002a4 <buttonRead+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	210a      	movs	r1, #10
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED){
 8000262:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <buttonRead+0x120>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d104      	bne.n	8000278 <buttonRead+0xf8>
						buttonFlag[i] = 1;
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <buttonRead+0x128>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_BUTTON; i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	dd83      	ble.n	800018c <buttonRead+0xc>
					}
				}
			}
		}
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000018 	.word	0x20000018
 8000294:	20000024 	.word	0x20000024
 8000298:	2000000c 	.word	0x2000000c
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000030 	.word	0x20000030
 80002a4:	20000000 	.word	0x20000000
 80002a8:	200000d8 	.word	0x200000d8

080002ac <segmentUpdateAuto>:
int tempGrn = 1;

int horCount = 0;
int verCount = 0;
int scan = 0;
void segmentUpdateAuto(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	updateSegment2Digits(horCount, verCount);
 80002b0:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <segmentUpdateAuto+0x18>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <segmentUpdateAuto+0x1c>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fee8 	bl	8001090 <updateSegment2Digits>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000e4 	.word	0x200000e4
 80002c8:	200000e8 	.word	0x200000e8

080002cc <fsm_run>:

void fsm_run(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	fsm_auto_hor();
 80002d0:	f000 f84c 	bl	800036c <fsm_auto_hor>
	fsm_auto_ver();
 80002d4:	f000 f964 	bl	80005a0 <fsm_auto_ver>
	fsm_man();
 80002d8:	f000 fa14 	bl	8000704 <fsm_man>
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <button0Signal>:

void button0Signal(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (isButtonNoPressed(0) == 1){
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ff31 	bl	800014c <isButtonNoPressed>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d130      	bne.n	8000352 <button0Signal+0x72>
		resetTimer(-1);
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295
 80002f4:	f001 f826 	bl	8001344 <resetTimer>
		horCount = 0, verCount = 0;
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <button0Signal+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <button0Signal+0x78>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
		updateSegment(IDLE, IDLE, IDLE, IDLE);
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	f04f 32ff 	mov.w	r2, #4294967295
 800030c:	f04f 31ff 	mov.w	r1, #4294967295
 8000310:	f04f 30ff 	mov.w	r0, #4294967295
 8000314:	f000 fea2 	bl	800105c <updateSegment>
		scan = 0;
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <button0Signal+0x7c>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		setLedH(IDLE);
 800031e:	f04f 30ff 	mov.w	r0, #4294967295
 8000322:	f000 fba5 	bl	8000a70 <setLedH>
		setLedV(IDLE);
 8000326:	f04f 30ff 	mov.w	r0, #4294967295
 800032a:	f000 fc1f 	bl	8000b6c <setLedV>
		autoState_H = IDLE;
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <button0Signal+0x80>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295
 8000334:	601a      	str	r2, [r3, #0]
		autoState_V = IDLE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <button0Signal+0x84>)
 8000338:	f04f 32ff 	mov.w	r2, #4294967295
 800033c:	601a      	str	r2, [r3, #0]
		manState = MAN_RED;
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <button0Signal+0x88>)
 8000340:	220a      	movs	r2, #10
 8000342:	601a      	str	r2, [r3, #0]
		set1(100);
 8000344:	2064      	movs	r0, #100	@ 0x64
 8000346:	f000 ff71 	bl	800122c <set1>
		set3(100);
 800034a:	2064      	movs	r0, #100	@ 0x64
 800034c:	f000 ffa6 	bl	800129c <set3>
		return;
 8000350:	bf00      	nop
	}
}
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200000e4 	.word	0x200000e4
 8000358:	200000e8 	.word	0x200000e8
 800035c:	200000ec 	.word	0x200000ec
 8000360:	2000003c 	.word	0x2000003c
 8000364:	20000040 	.word	0x20000040
 8000368:	20000044 	.word	0x20000044

0800036c <fsm_auto_hor>:

void fsm_auto_hor(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(autoState_H){
 8000370:	4b81      	ldr	r3, [pc, #516]	@ (8000578 <fsm_auto_hor+0x20c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b21      	cmp	r3, #33	@ 0x21
 8000376:	d06d      	beq.n	8000454 <fsm_auto_hor+0xe8>
 8000378:	2b21      	cmp	r3, #33	@ 0x21
 800037a:	f300 80f9 	bgt.w	8000570 <fsm_auto_hor+0x204>
 800037e:	2b16      	cmp	r3, #22
 8000380:	f000 80af 	beq.w	80004e2 <fsm_auto_hor+0x176>
 8000384:	2b16      	cmp	r3, #22
 8000386:	f300 80f3 	bgt.w	8000570 <fsm_auto_hor+0x204>
 800038a:	2b01      	cmp	r3, #1
 800038c:	d002      	beq.n	8000394 <fsm_auto_hor+0x28>
 800038e:	2b0b      	cmp	r3, #11
 8000390:	d019      	beq.n	80003c6 <fsm_auto_hor+0x5a>
			set3(100);
		}
		button0Signal();
		break;
	default: //IDLE
		break;
 8000392:	e0ed      	b.n	8000570 <fsm_auto_hor+0x204>
		set1(redDur * 1000); //timer1 is for the hor_state
 8000394:	4b79      	ldr	r3, [pc, #484]	@ (800057c <fsm_auto_hor+0x210>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 ff43 	bl	800122c <set1>
		set2(1000); //counter
 80003a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003aa:	f000 ff5b 	bl	8001264 <set2>
		set3(100);  //scanning LED, does not need at fsm_auto_ver
 80003ae:	2064      	movs	r0, #100	@ 0x64
 80003b0:	f000 ff74 	bl	800129c <set3>
		horCount = redDur - 1;
 80003b4:	4b71      	ldr	r3, [pc, #452]	@ (800057c <fsm_auto_hor+0x210>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	4a71      	ldr	r2, [pc, #452]	@ (8000580 <fsm_auto_hor+0x214>)
 80003bc:	6013      	str	r3, [r2, #0]
		autoState_H = RED;
 80003be:	4b6e      	ldr	r3, [pc, #440]	@ (8000578 <fsm_auto_hor+0x20c>)
 80003c0:	220b      	movs	r2, #11
 80003c2:	601a      	str	r2, [r3, #0]
		break;
 80003c4:	e0d5      	b.n	8000572 <fsm_auto_hor+0x206>
		setLedH(RED);
 80003c6:	200b      	movs	r0, #11
 80003c8:	f000 fb52 	bl	8000a70 <setLedH>
		if (flag2 == 1){
 80003cc:	4b6d      	ldr	r3, [pc, #436]	@ (8000584 <fsm_auto_hor+0x218>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10f      	bne.n	80003f4 <fsm_auto_hor+0x88>
			horCount--;
 80003d4:	4b6a      	ldr	r3, [pc, #424]	@ (8000580 <fsm_auto_hor+0x214>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a69      	ldr	r2, [pc, #420]	@ (8000580 <fsm_auto_hor+0x214>)
 80003dc:	6013      	str	r3, [r2, #0]
			if (verCount < 0) verCount = 9;
 80003de:	4b6a      	ldr	r3, [pc, #424]	@ (8000588 <fsm_auto_hor+0x21c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	da02      	bge.n	80003ec <fsm_auto_hor+0x80>
 80003e6:	4b68      	ldr	r3, [pc, #416]	@ (8000588 <fsm_auto_hor+0x21c>)
 80003e8:	2209      	movs	r2, #9
 80003ea:	601a      	str	r2, [r3, #0]
			set2(1000);
 80003ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f0:	f000 ff38 	bl	8001264 <set2>
		if (flag1 == 1){ //switch state
 80003f4:	4b65      	ldr	r3, [pc, #404]	@ (800058c <fsm_auto_hor+0x220>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d110      	bne.n	800041e <fsm_auto_hor+0xb2>
			set1(grnDur * 1000);
 80003fc:	4b64      	ldr	r3, [pc, #400]	@ (8000590 <fsm_auto_hor+0x224>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000404:	fb02 f303 	mul.w	r3, r2, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f000 ff0f 	bl	800122c <set1>
			horCount = grnDur - 1;
 800040e:	4b60      	ldr	r3, [pc, #384]	@ (8000590 <fsm_auto_hor+0x224>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a5a      	ldr	r2, [pc, #360]	@ (8000580 <fsm_auto_hor+0x214>)
 8000416:	6013      	str	r3, [r2, #0]
			autoState_H = GRN;
 8000418:	4b57      	ldr	r3, [pc, #348]	@ (8000578 <fsm_auto_hor+0x20c>)
 800041a:	2221      	movs	r2, #33	@ 0x21
 800041c:	601a      	str	r2, [r3, #0]
		if (flag3 == 1){
 800041e:	4b5d      	ldr	r3, [pc, #372]	@ (8000594 <fsm_auto_hor+0x228>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d113      	bne.n	800044e <fsm_auto_hor+0xe2>
			segmentUpdateAuto();
 8000426:	f7ff ff41 	bl	80002ac <segmentUpdateAuto>
			scan = (scan == 1) ? 0 : 1;
 800042a:	4b5b      	ldr	r3, [pc, #364]	@ (8000598 <fsm_auto_hor+0x22c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b01      	cmp	r3, #1
 8000430:	bf14      	ite	ne
 8000432:	2301      	movne	r3, #1
 8000434:	2300      	moveq	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	4b57      	ldr	r3, [pc, #348]	@ (8000598 <fsm_auto_hor+0x22c>)
 800043c:	601a      	str	r2, [r3, #0]
			scan7Seg(scan);
 800043e:	4b56      	ldr	r3, [pc, #344]	@ (8000598 <fsm_auto_hor+0x22c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fdac 	bl	8000fa0 <scan7Seg>
			set3(100);
 8000448:	2064      	movs	r0, #100	@ 0x64
 800044a:	f000 ff27 	bl	800129c <set3>
		button0Signal();
 800044e:	f7ff ff47 	bl	80002e0 <button0Signal>
		break;
 8000452:	e08e      	b.n	8000572 <fsm_auto_hor+0x206>
		setLedH(GRN);
 8000454:	2021      	movs	r0, #33	@ 0x21
 8000456:	f000 fb0b 	bl	8000a70 <setLedH>
		if (flag2 == 1){
 800045a:	4b4a      	ldr	r3, [pc, #296]	@ (8000584 <fsm_auto_hor+0x218>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d10f      	bne.n	8000482 <fsm_auto_hor+0x116>
			horCount--;
 8000462:	4b47      	ldr	r3, [pc, #284]	@ (8000580 <fsm_auto_hor+0x214>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a45      	ldr	r2, [pc, #276]	@ (8000580 <fsm_auto_hor+0x214>)
 800046a:	6013      	str	r3, [r2, #0]
			if (verCount < 0) verCount = 9;
 800046c:	4b46      	ldr	r3, [pc, #280]	@ (8000588 <fsm_auto_hor+0x21c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da02      	bge.n	800047a <fsm_auto_hor+0x10e>
 8000474:	4b44      	ldr	r3, [pc, #272]	@ (8000588 <fsm_auto_hor+0x21c>)
 8000476:	2209      	movs	r2, #9
 8000478:	601a      	str	r2, [r3, #0]
			set2(1000);
 800047a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800047e:	f000 fef1 	bl	8001264 <set2>
		if (flag1 == 1){
 8000482:	4b42      	ldr	r3, [pc, #264]	@ (800058c <fsm_auto_hor+0x220>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d110      	bne.n	80004ac <fsm_auto_hor+0x140>
			set1(yelDur * 1000);
 800048a:	4b44      	ldr	r3, [pc, #272]	@ (800059c <fsm_auto_hor+0x230>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fec8 	bl	800122c <set1>
			horCount = yelDur - 1;
 800049c:	4b3f      	ldr	r3, [pc, #252]	@ (800059c <fsm_auto_hor+0x230>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a37      	ldr	r2, [pc, #220]	@ (8000580 <fsm_auto_hor+0x214>)
 80004a4:	6013      	str	r3, [r2, #0]
			autoState_H = YEL;
 80004a6:	4b34      	ldr	r3, [pc, #208]	@ (8000578 <fsm_auto_hor+0x20c>)
 80004a8:	2216      	movs	r2, #22
 80004aa:	601a      	str	r2, [r3, #0]
		if (flag3 == 1){
 80004ac:	4b39      	ldr	r3, [pc, #228]	@ (8000594 <fsm_auto_hor+0x228>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d113      	bne.n	80004dc <fsm_auto_hor+0x170>
			segmentUpdateAuto();
 80004b4:	f7ff fefa 	bl	80002ac <segmentUpdateAuto>
			scan = (scan == 1) ? 0 : 1;
 80004b8:	4b37      	ldr	r3, [pc, #220]	@ (8000598 <fsm_auto_hor+0x22c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	bf14      	ite	ne
 80004c0:	2301      	movne	r3, #1
 80004c2:	2300      	moveq	r3, #0
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b33      	ldr	r3, [pc, #204]	@ (8000598 <fsm_auto_hor+0x22c>)
 80004ca:	601a      	str	r2, [r3, #0]
			scan7Seg(scan);
 80004cc:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <fsm_auto_hor+0x22c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fd65 	bl	8000fa0 <scan7Seg>
			set3(100);
 80004d6:	2064      	movs	r0, #100	@ 0x64
 80004d8:	f000 fee0 	bl	800129c <set3>
		button0Signal();
 80004dc:	f7ff ff00 	bl	80002e0 <button0Signal>
		break;
 80004e0:	e047      	b.n	8000572 <fsm_auto_hor+0x206>
		setLedH(YEL);
 80004e2:	2016      	movs	r0, #22
 80004e4:	f000 fac4 	bl	8000a70 <setLedH>
		if (flag2 == 1){
 80004e8:	4b26      	ldr	r3, [pc, #152]	@ (8000584 <fsm_auto_hor+0x218>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10f      	bne.n	8000510 <fsm_auto_hor+0x1a4>
			horCount--;
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <fsm_auto_hor+0x214>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	4a22      	ldr	r2, [pc, #136]	@ (8000580 <fsm_auto_hor+0x214>)
 80004f8:	6013      	str	r3, [r2, #0]
			if (verCount < 0) verCount = 9;//sync with vertical
 80004fa:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <fsm_auto_hor+0x21c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	da02      	bge.n	8000508 <fsm_auto_hor+0x19c>
 8000502:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <fsm_auto_hor+0x21c>)
 8000504:	2209      	movs	r2, #9
 8000506:	601a      	str	r2, [r3, #0]
			set2(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050c:	f000 feaa 	bl	8001264 <set2>
		if (flag1 == 1){
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <fsm_auto_hor+0x220>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d110      	bne.n	800053a <fsm_auto_hor+0x1ce>
			set1(redDur * 1000);
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <fsm_auto_hor+0x210>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 fe81 	bl	800122c <set1>
			horCount = redDur - 1;
 800052a:	4b14      	ldr	r3, [pc, #80]	@ (800057c <fsm_auto_hor+0x210>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	4a13      	ldr	r2, [pc, #76]	@ (8000580 <fsm_auto_hor+0x214>)
 8000532:	6013      	str	r3, [r2, #0]
			autoState_H = RED;
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <fsm_auto_hor+0x20c>)
 8000536:	220b      	movs	r2, #11
 8000538:	601a      	str	r2, [r3, #0]
		if (flag3 == 1){
 800053a:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <fsm_auto_hor+0x228>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d113      	bne.n	800056a <fsm_auto_hor+0x1fe>
			segmentUpdateAuto();
 8000542:	f7ff feb3 	bl	80002ac <segmentUpdateAuto>
			scan = (scan == 1) ? 0 : 1;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <fsm_auto_hor+0x22c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	bf14      	ite	ne
 800054e:	2301      	movne	r3, #1
 8000550:	2300      	moveq	r3, #0
 8000552:	b2db      	uxtb	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <fsm_auto_hor+0x22c>)
 8000558:	601a      	str	r2, [r3, #0]
			scan7Seg(scan);
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <fsm_auto_hor+0x22c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fd1e 	bl	8000fa0 <scan7Seg>
			set3(100);
 8000564:	2064      	movs	r0, #100	@ 0x64
 8000566:	f000 fe99 	bl	800129c <set3>
		button0Signal();
 800056a:	f7ff feb9 	bl	80002e0 <button0Signal>
		break;
 800056e:	e000      	b.n	8000572 <fsm_auto_hor+0x206>
		break;
 8000570:	bf00      	nop
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000003c 	.word	0x2000003c
 800057c:	20000048 	.word	0x20000048
 8000580:	200000e4 	.word	0x200000e4
 8000584:	20000168 	.word	0x20000168
 8000588:	200000e8 	.word	0x200000e8
 800058c:	20000164 	.word	0x20000164
 8000590:	20000050 	.word	0x20000050
 8000594:	2000016c 	.word	0x2000016c
 8000598:	200000ec 	.word	0x200000ec
 800059c:	2000004c 	.word	0x2000004c

080005a0 <fsm_auto_ver>:

void fsm_auto_ver(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    switch(autoState_V){
 80005a4:	4b50      	ldr	r3, [pc, #320]	@ (80006e8 <fsm_auto_ver+0x148>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b21      	cmp	r3, #33	@ 0x21
 80005aa:	d022      	beq.n	80005f2 <fsm_auto_ver+0x52>
 80005ac:	2b21      	cmp	r3, #33	@ 0x21
 80005ae:	f300 8092 	bgt.w	80006d6 <fsm_auto_ver+0x136>
 80005b2:	2b16      	cmp	r3, #22
 80005b4:	d043      	beq.n	800063e <fsm_auto_ver+0x9e>
 80005b6:	2b16      	cmp	r3, #22
 80005b8:	f300 808d 	bgt.w	80006d6 <fsm_auto_ver+0x136>
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d002      	beq.n	80005c6 <fsm_auto_ver+0x26>
 80005c0:	2b0b      	cmp	r3, #11
 80005c2:	d062      	beq.n	800068a <fsm_auto_ver+0xea>
    		set4(grnDur * 1000);
    		verCount = grnDur - 1;
    		autoState_V = GRN;
    	}
    	break;
    default: break;
 80005c4:	e087      	b.n	80006d6 <fsm_auto_ver+0x136>
        set4(grnDur * 1000); //timer4 is for the ver_state
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <fsm_auto_ver+0x14c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ce:	fb02 f303 	mul.w	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fe7e 	bl	80012d4 <set4>
        set5(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005dc:	f000 fe96 	bl	800130c <set5>
        verCount = grnDur - 1;
 80005e0:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <fsm_auto_ver+0x14c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4a42      	ldr	r2, [pc, #264]	@ (80006f0 <fsm_auto_ver+0x150>)
 80005e8:	6013      	str	r3, [r2, #0]
        autoState_V = GRN;
 80005ea:	4b3f      	ldr	r3, [pc, #252]	@ (80006e8 <fsm_auto_ver+0x148>)
 80005ec:	2221      	movs	r2, #33	@ 0x21
 80005ee:	601a      	str	r2, [r3, #0]
        break;
 80005f0:	e078      	b.n	80006e4 <fsm_auto_ver+0x144>
    	setLedV(GRN);
 80005f2:	2021      	movs	r0, #33	@ 0x21
 80005f4:	f000 faba 	bl	8000b6c <setLedV>
    	if (flag5 == 1){
 80005f8:	4b3e      	ldr	r3, [pc, #248]	@ (80006f4 <fsm_auto_ver+0x154>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d108      	bne.n	8000612 <fsm_auto_ver+0x72>
    		verCount--;
 8000600:	4b3b      	ldr	r3, [pc, #236]	@ (80006f0 <fsm_auto_ver+0x150>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b01      	subs	r3, #1
 8000606:	4a3a      	ldr	r2, [pc, #232]	@ (80006f0 <fsm_auto_ver+0x150>)
 8000608:	6013      	str	r3, [r2, #0]
    		set5(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060e:	f000 fe7d 	bl	800130c <set5>
    	if (flag4 == 1){
 8000612:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <fsm_auto_ver+0x158>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d15f      	bne.n	80006da <fsm_auto_ver+0x13a>
    		set4(yelDur * 1000);
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <fsm_auto_ver+0x15c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fe54 	bl	80012d4 <set4>
    		verCount = yelDur - 1;
 800062c:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <fsm_auto_ver+0x15c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a2f      	ldr	r2, [pc, #188]	@ (80006f0 <fsm_auto_ver+0x150>)
 8000634:	6013      	str	r3, [r2, #0]
    		autoState_V = YEL;
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <fsm_auto_ver+0x148>)
 8000638:	2216      	movs	r2, #22
 800063a:	601a      	str	r2, [r3, #0]
    	break;
 800063c:	e04d      	b.n	80006da <fsm_auto_ver+0x13a>
    	setLedV(YEL);
 800063e:	2016      	movs	r0, #22
 8000640:	f000 fa94 	bl	8000b6c <setLedV>
    	if (flag5 == 1){
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <fsm_auto_ver+0x154>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d108      	bne.n	800065e <fsm_auto_ver+0xbe>
    		verCount--;
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <fsm_auto_ver+0x150>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <fsm_auto_ver+0x150>)
 8000654:	6013      	str	r3, [r2, #0]
    		set5(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065a:	f000 fe57 	bl	800130c <set5>
    	if (flag4 == 1){
 800065e:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <fsm_auto_ver+0x158>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d13b      	bne.n	80006de <fsm_auto_ver+0x13e>
    		set4(redDur * 1000);
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <fsm_auto_ver+0x160>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe2e 	bl	80012d4 <set4>
    		verCount = redDur - 1;
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <fsm_auto_ver+0x160>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <fsm_auto_ver+0x150>)
 8000680:	6013      	str	r3, [r2, #0]
    		autoState_V = RED;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <fsm_auto_ver+0x148>)
 8000684:	220b      	movs	r2, #11
 8000686:	601a      	str	r2, [r3, #0]
    	break;
 8000688:	e029      	b.n	80006de <fsm_auto_ver+0x13e>
    	setLedV(RED);
 800068a:	200b      	movs	r0, #11
 800068c:	f000 fa6e 	bl	8000b6c <setLedV>
    	if (flag5 == 1){
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <fsm_auto_ver+0x154>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d108      	bne.n	80006aa <fsm_auto_ver+0x10a>
    		verCount--;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <fsm_auto_ver+0x150>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <fsm_auto_ver+0x150>)
 80006a0:	6013      	str	r3, [r2, #0]
    		set5(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a6:	f000 fe31 	bl	800130c <set5>
    	if (flag4 == 1){
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <fsm_auto_ver+0x158>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d117      	bne.n	80006e2 <fsm_auto_ver+0x142>
    		set4(grnDur * 1000);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <fsm_auto_ver+0x14c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fe08 	bl	80012d4 <set4>
    		verCount = grnDur - 1;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <fsm_auto_ver+0x14c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <fsm_auto_ver+0x150>)
 80006cc:	6013      	str	r3, [r2, #0]
    		autoState_V = GRN;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <fsm_auto_ver+0x148>)
 80006d0:	2221      	movs	r2, #33	@ 0x21
 80006d2:	601a      	str	r2, [r3, #0]
    	break;
 80006d4:	e005      	b.n	80006e2 <fsm_auto_ver+0x142>
    default: break;
 80006d6:	bf00      	nop
 80006d8:	e004      	b.n	80006e4 <fsm_auto_ver+0x144>
    	break;
 80006da:	bf00      	nop
 80006dc:	e002      	b.n	80006e4 <fsm_auto_ver+0x144>
    	break;
 80006de:	bf00      	nop
 80006e0:	e000      	b.n	80006e4 <fsm_auto_ver+0x144>
    	break;
 80006e2:	bf00      	nop
    }
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000040 	.word	0x20000040
 80006ec:	20000050 	.word	0x20000050
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	20000174 	.word	0x20000174
 80006f8:	20000170 	.word	0x20000170
 80006fc:	2000004c 	.word	0x2000004c
 8000700:	20000048 	.word	0x20000048

08000704 <fsm_man>:


void fsm_man(){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	switch(manState){
 800070a:	4ba7      	ldr	r3, [pc, #668]	@ (80009a8 <fsm_man+0x2a4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b1e      	cmp	r3, #30
 8000710:	f000 80ce 	beq.w	80008b0 <fsm_man+0x1ac>
 8000714:	2b1e      	cmp	r3, #30
 8000716:	f300 8195 	bgt.w	8000a44 <fsm_man+0x340>
 800071a:	2b0a      	cmp	r3, #10
 800071c:	d002      	beq.n	8000724 <fsm_man+0x20>
 800071e:	2b14      	cmp	r3, #20
 8000720:	d063      	beq.n	80007ea <fsm_man+0xe6>
			//set the flag again; then displaying modes
			set3(100);
		}
		break;
	default:
		break;
 8000722:	e18f      	b.n	8000a44 <fsm_man+0x340>
		updateSegment2Digits(tempRed, 22);
 8000724:	4ba1      	ldr	r3, [pc, #644]	@ (80009ac <fsm_man+0x2a8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2116      	movs	r1, #22
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fcb0 	bl	8001090 <updateSegment2Digits>
		if (isButtonNoPressed(0) == 1){
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd0b 	bl	800014c <isButtonNoPressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d113      	bne.n	8000764 <fsm_man+0x60>
			tempRed = 1;
 800073c:	4b9b      	ldr	r3, [pc, #620]	@ (80009ac <fsm_man+0x2a8>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
			manState = MAN_YEL;
 8000742:	4b99      	ldr	r3, [pc, #612]	@ (80009a8 <fsm_man+0x2a4>)
 8000744:	2214      	movs	r2, #20
 8000746:	601a      	str	r2, [r3, #0]
			setLedV(IDLE);
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 fa0e 	bl	8000b6c <setLedV>
			setLedH(IDLE);
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f98c 	bl	8000a70 <setLedH>
			set1(100);
 8000758:	2064      	movs	r0, #100	@ 0x64
 800075a:	f000 fd67 	bl	800122c <set1>
			set3(100);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f000 fd9c 	bl	800129c <set3>
		if (isButtonNoPressed(1) == 1){
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fcf1 	bl	800014c <isButtonNoPressed>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d10a      	bne.n	8000786 <fsm_man+0x82>
			tempRed = (tempRed == 99) ? 1 : tempRed + 1;
 8000770:	4b8e      	ldr	r3, [pc, #568]	@ (80009ac <fsm_man+0x2a8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b63      	cmp	r3, #99	@ 0x63
 8000776:	d003      	beq.n	8000780 <fsm_man+0x7c>
 8000778:	4b8c      	ldr	r3, [pc, #560]	@ (80009ac <fsm_man+0x2a8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	e000      	b.n	8000782 <fsm_man+0x7e>
 8000780:	2301      	movs	r3, #1
 8000782:	4a8a      	ldr	r2, [pc, #552]	@ (80009ac <fsm_man+0x2a8>)
 8000784:	6013      	str	r3, [r2, #0]
		if (isButtonNoPressed(2) == 1){
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff fce0 	bl	800014c <isButtonNoPressed>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d103      	bne.n	800079a <fsm_man+0x96>
			redDur = tempRed;
 8000792:	4b86      	ldr	r3, [pc, #536]	@ (80009ac <fsm_man+0x2a8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a86      	ldr	r2, [pc, #536]	@ (80009b0 <fsm_man+0x2ac>)
 8000798:	6013      	str	r3, [r2, #0]
		if (flag1 == 1){ //flickering the LEDs light
 800079a:	4b86      	ldr	r3, [pc, #536]	@ (80009b4 <fsm_man+0x2b0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10b      	bne.n	80007ba <fsm_man+0xb6>
			HAL_GPIO_TogglePin(red_h_GPIO_Port, red_h_Pin);
 80007a2:	2102      	movs	r1, #2
 80007a4:	4884      	ldr	r0, [pc, #528]	@ (80009b8 <fsm_man+0x2b4>)
 80007a6:	f001 f9fa 	bl	8001b9e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(red_v_GPIO_Port, red_v_Pin);
 80007aa:	2110      	movs	r1, #16
 80007ac:	4882      	ldr	r0, [pc, #520]	@ (80009b8 <fsm_man+0x2b4>)
 80007ae:	f001 f9f6 	bl	8001b9e <HAL_GPIO_TogglePin>
			set1(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b6:	f000 fd39 	bl	800122c <set1>
		if (flag3 == 1){
 80007ba:	4b80      	ldr	r3, [pc, #512]	@ (80009bc <fsm_man+0x2b8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 8142 	bne.w	8000a48 <fsm_man+0x344>
			scan = (scan + 1)%2;
 80007c4:	4b7e      	ldr	r3, [pc, #504]	@ (80009c0 <fsm_man+0x2bc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	bfb8      	it	lt
 80007d2:	425b      	neglt	r3, r3
 80007d4:	4a7a      	ldr	r2, [pc, #488]	@ (80009c0 <fsm_man+0x2bc>)
 80007d6:	6013      	str	r3, [r2, #0]
			scan7Seg(scan);
 80007d8:	4b79      	ldr	r3, [pc, #484]	@ (80009c0 <fsm_man+0x2bc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fbdf 	bl	8000fa0 <scan7Seg>
			set3(100);
 80007e2:	2064      	movs	r0, #100	@ 0x64
 80007e4:	f000 fd5a 	bl	800129c <set3>
		break;
 80007e8:	e12e      	b.n	8000a48 <fsm_man+0x344>
		updateSegment2Digits(tempYel, 33);
 80007ea:	4b76      	ldr	r3, [pc, #472]	@ (80009c4 <fsm_man+0x2c0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2121      	movs	r1, #33	@ 0x21
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc4d 	bl	8001090 <updateSegment2Digits>
		if (isButtonNoPressed(0) == 1){
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fca8 	bl	800014c <isButtonNoPressed>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d113      	bne.n	800082a <fsm_man+0x126>
			tempYel = 1;
 8000802:	4b70      	ldr	r3, [pc, #448]	@ (80009c4 <fsm_man+0x2c0>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			manState = MAN_GRN;
 8000808:	4b67      	ldr	r3, [pc, #412]	@ (80009a8 <fsm_man+0x2a4>)
 800080a:	221e      	movs	r2, #30
 800080c:	601a      	str	r2, [r3, #0]
			setLedV(IDLE);
 800080e:	f04f 30ff 	mov.w	r0, #4294967295
 8000812:	f000 f9ab 	bl	8000b6c <setLedV>
			setLedH(IDLE);
 8000816:	f04f 30ff 	mov.w	r0, #4294967295
 800081a:	f000 f929 	bl	8000a70 <setLedH>
			set1(100);
 800081e:	2064      	movs	r0, #100	@ 0x64
 8000820:	f000 fd04 	bl	800122c <set1>
			set3(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f000 fd39 	bl	800129c <set3>
		if (isButtonNoPressed(1) == 1){
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fc8e 	bl	800014c <isButtonNoPressed>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10a      	bne.n	800084c <fsm_man+0x148>
			tempYel = (tempYel == 99) ? 1 : tempYel + 1;
 8000836:	4b63      	ldr	r3, [pc, #396]	@ (80009c4 <fsm_man+0x2c0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b63      	cmp	r3, #99	@ 0x63
 800083c:	d003      	beq.n	8000846 <fsm_man+0x142>
 800083e:	4b61      	ldr	r3, [pc, #388]	@ (80009c4 <fsm_man+0x2c0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	e000      	b.n	8000848 <fsm_man+0x144>
 8000846:	2301      	movs	r3, #1
 8000848:	4a5e      	ldr	r2, [pc, #376]	@ (80009c4 <fsm_man+0x2c0>)
 800084a:	6013      	str	r3, [r2, #0]
		if (isButtonNoPressed(2) == 1){
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff fc7d 	bl	800014c <isButtonNoPressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d103      	bne.n	8000860 <fsm_man+0x15c>
			yelDur = tempYel;
 8000858:	4b5a      	ldr	r3, [pc, #360]	@ (80009c4 <fsm_man+0x2c0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a5a      	ldr	r2, [pc, #360]	@ (80009c8 <fsm_man+0x2c4>)
 800085e:	6013      	str	r3, [r2, #0]
		if (flag1 == 1){ //flickering the LEDs light
 8000860:	4b54      	ldr	r3, [pc, #336]	@ (80009b4 <fsm_man+0x2b0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d10b      	bne.n	8000880 <fsm_man+0x17c>
			HAL_GPIO_TogglePin(yel_h_GPIO_Port, yel_h_Pin);
 8000868:	2104      	movs	r1, #4
 800086a:	4853      	ldr	r0, [pc, #332]	@ (80009b8 <fsm_man+0x2b4>)
 800086c:	f001 f997 	bl	8001b9e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yel_v_GPIO_Port, yel_v_Pin);
 8000870:	2120      	movs	r1, #32
 8000872:	4851      	ldr	r0, [pc, #324]	@ (80009b8 <fsm_man+0x2b4>)
 8000874:	f001 f993 	bl	8001b9e <HAL_GPIO_TogglePin>
			set1(500);
 8000878:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087c:	f000 fcd6 	bl	800122c <set1>
		if (flag3 == 1){
 8000880:	4b4e      	ldr	r3, [pc, #312]	@ (80009bc <fsm_man+0x2b8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80e1 	bne.w	8000a4c <fsm_man+0x348>
			scan = (scan + 1)%2;
 800088a:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <fsm_man+0x2bc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	2b00      	cmp	r3, #0
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	bfb8      	it	lt
 8000898:	425b      	neglt	r3, r3
 800089a:	4a49      	ldr	r2, [pc, #292]	@ (80009c0 <fsm_man+0x2bc>)
 800089c:	6013      	str	r3, [r2, #0]
			scan7Seg(scan);
 800089e:	4b48      	ldr	r3, [pc, #288]	@ (80009c0 <fsm_man+0x2bc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fb7c 	bl	8000fa0 <scan7Seg>
			set3(100);
 80008a8:	2064      	movs	r0, #100	@ 0x64
 80008aa:	f000 fcf7 	bl	800129c <set3>
		break;
 80008ae:	e0cd      	b.n	8000a4c <fsm_man+0x348>
		updateSegment2Digits(tempGrn, 44);
 80008b0:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <fsm_man+0x2c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	212c      	movs	r1, #44	@ 0x2c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fbea 	bl	8001090 <updateSegment2Digits>
		if (isButtonNoPressed(0) == 1){
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fc45 	bl	800014c <isButtonNoPressed>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d161      	bne.n	800098c <fsm_man+0x288>
			if (yelDur > grnDur){
 80008c8:	4b3f      	ldr	r3, [pc, #252]	@ (80009c8 <fsm_man+0x2c4>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b40      	ldr	r3, [pc, #256]	@ (80009d0 <fsm_man+0x2cc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dd06      	ble.n	80008e2 <fsm_man+0x1de>
				grnDur += yelDur;
 80008d4:	4b3e      	ldr	r3, [pc, #248]	@ (80009d0 <fsm_man+0x2cc>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b3b      	ldr	r3, [pc, #236]	@ (80009c8 <fsm_man+0x2c4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a3c      	ldr	r2, [pc, #240]	@ (80009d0 <fsm_man+0x2cc>)
 80008e0:	6013      	str	r3, [r2, #0]
			if (redDur < grnDur + yelDur){
 80008e2:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <fsm_man+0x2cc>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b38      	ldr	r3, [pc, #224]	@ (80009c8 <fsm_man+0x2c4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	441a      	add	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <fsm_man+0x2ac>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dd06      	ble.n	8000902 <fsm_man+0x1fe>
				redDur = grnDur + yelDur;
 80008f4:	4b36      	ldr	r3, [pc, #216]	@ (80009d0 <fsm_man+0x2cc>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <fsm_man+0x2c4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a2c      	ldr	r2, [pc, #176]	@ (80009b0 <fsm_man+0x2ac>)
 8000900:	6013      	str	r3, [r2, #0]
			if (grnDur >= redDur + yelDur){
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <fsm_man+0x2ac>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <fsm_man+0x2c4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	441a      	add	r2, r3
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <fsm_man+0x2cc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	dc06      	bgt.n	8000922 <fsm_man+0x21e>
				grnDur = redDur - yelDur;
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <fsm_man+0x2ac>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b2b      	ldr	r3, [pc, #172]	@ (80009c8 <fsm_man+0x2c4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	4a2c      	ldr	r2, [pc, #176]	@ (80009d0 <fsm_man+0x2cc>)
 8000920:	6013      	str	r3, [r2, #0]
			setLedH(ALL);
 8000922:	202c      	movs	r0, #44	@ 0x2c
 8000924:	f000 f8a4 	bl	8000a70 <setLedH>
			setLedV(ALL);
 8000928:	202c      	movs	r0, #44	@ 0x2c
 800092a:	f000 f91f 	bl	8000b6c <setLedV>
			set7SegH(8);
 800092e:	2008      	movs	r0, #8
 8000930:	f000 faaa 	bl	8000e88 <set7SegH>
			set7SegV(8);
 8000934:	2008      	movs	r0, #8
 8000936:	f000 faed 	bl	8000f14 <set7SegV>
			for (int i = 0; i < 4; i++){
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	e008      	b.n	8000952 <fsm_man+0x24e>
				HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin << 1, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000946:	481c      	ldr	r0, [pc, #112]	@ (80009b8 <fsm_man+0x2b4>)
 8000948:	f001 f911 	bl	8001b6e <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b03      	cmp	r3, #3
 8000956:	ddf3      	ble.n	8000940 <fsm_man+0x23c>
			HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f000 fe42 	bl	80015e4 <HAL_Delay>
			setLedV(IDLE);
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f902 	bl	8000b6c <setLedV>
			setLedH(IDLE);
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f880 	bl	8000a70 <setLedH>
			resetTimer(NONE); //reset all timer;
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fce7 	bl	8001344 <resetTimer>
			manState = IDLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <fsm_man+0x2a4>)
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	601a      	str	r2, [r3, #0]
			autoState_H = INIT;
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <fsm_man+0x2d0>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			autoState_V = INIT;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <fsm_man+0x2d4>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
			return;
 800098a:	e062      	b.n	8000a52 <fsm_man+0x34e>
		if (isButtonNoPressed(1) == 1){
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fbdd 	bl	800014c <isButtonNoPressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d124      	bne.n	80009e2 <fsm_man+0x2de>
			tempGrn = (tempGrn == 99) ? 1 : tempGrn + 1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <fsm_man+0x2c8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b63      	cmp	r3, #99	@ 0x63
 800099e:	d01d      	beq.n	80009dc <fsm_man+0x2d8>
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <fsm_man+0x2c8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	e01a      	b.n	80009de <fsm_man+0x2da>
 80009a8:	20000044 	.word	0x20000044
 80009ac:	20000054 	.word	0x20000054
 80009b0:	20000048 	.word	0x20000048
 80009b4:	20000164 	.word	0x20000164
 80009b8:	40010800 	.word	0x40010800
 80009bc:	2000016c 	.word	0x2000016c
 80009c0:	200000ec 	.word	0x200000ec
 80009c4:	20000058 	.word	0x20000058
 80009c8:	2000004c 	.word	0x2000004c
 80009cc:	2000005c 	.word	0x2000005c
 80009d0:	20000050 	.word	0x20000050
 80009d4:	2000003c 	.word	0x2000003c
 80009d8:	20000040 	.word	0x20000040
 80009dc:	2301      	movs	r3, #1
 80009de:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <fsm_man+0x354>)
 80009e0:	6013      	str	r3, [r2, #0]
		if (isButtonNoPressed(2) == 1){
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fbb2 	bl	800014c <isButtonNoPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d103      	bne.n	80009f6 <fsm_man+0x2f2>
			grnDur = tempGrn;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <fsm_man+0x354>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a5c <fsm_man+0x358>)
 80009f4:	6013      	str	r3, [r2, #0]
		if (flag1 == 1){ //flickering the LEDs light
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <fsm_man+0x35c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d10b      	bne.n	8000a16 <fsm_man+0x312>
			HAL_GPIO_TogglePin(grn_h_GPIO_Port, grn_h_Pin);
 80009fe:	2108      	movs	r1, #8
 8000a00:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <fsm_man+0x360>)
 8000a02:	f001 f8cc 	bl	8001b9e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(grn_v_GPIO_Port, grn_v_Pin);
 8000a06:	2140      	movs	r1, #64	@ 0x40
 8000a08:	4816      	ldr	r0, [pc, #88]	@ (8000a64 <fsm_man+0x360>)
 8000a0a:	f001 f8c8 	bl	8001b9e <HAL_GPIO_TogglePin>
			set1(500);
 8000a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a12:	f000 fc0b 	bl	800122c <set1>
		if (flag3 == 1){
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <fsm_man+0x364>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d118      	bne.n	8000a50 <fsm_man+0x34c>
			scan = (scan + 1)%2;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <fsm_man+0x368>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	bfb8      	it	lt
 8000a2c:	425b      	neglt	r3, r3
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <fsm_man+0x368>)
 8000a30:	6013      	str	r3, [r2, #0]
			scan7Seg(scan);
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <fsm_man+0x368>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fab2 	bl	8000fa0 <scan7Seg>
			set3(100);
 8000a3c:	2064      	movs	r0, #100	@ 0x64
 8000a3e:	f000 fc2d 	bl	800129c <set3>
		break;
 8000a42:	e005      	b.n	8000a50 <fsm_man+0x34c>
		break;
 8000a44:	bf00      	nop
 8000a46:	e004      	b.n	8000a52 <fsm_man+0x34e>
		break;
 8000a48:	bf00      	nop
 8000a4a:	e002      	b.n	8000a52 <fsm_man+0x34e>
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e000      	b.n	8000a52 <fsm_man+0x34e>
		break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000005c 	.word	0x2000005c
 8000a5c:	20000050 	.word	0x20000050
 8000a60:	20000164 	.word	0x20000164
 8000a64:	40010800 	.word	0x40010800
 8000a68:	2000016c 	.word	0x2000016c
 8000a6c:	200000ec 	.word	0x200000ec

08000a70 <setLedH>:
 *      Author: l1ttled1no
 */
#include "led.h"
int horState = NONE;
int verState = NONE;
void setLedH(int color){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	switch(color){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a7c:	d048      	beq.n	8000b10 <setLedH+0xa0>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a82:	dc58      	bgt.n	8000b36 <setLedH+0xc6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b21      	cmp	r3, #33	@ 0x21
 8000a88:	d02f      	beq.n	8000aea <setLedH+0x7a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b21      	cmp	r3, #33	@ 0x21
 8000a8e:	dc52      	bgt.n	8000b36 <setLedH+0xc6>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0b      	cmp	r3, #11
 8000a94:	d003      	beq.n	8000a9e <setLedH+0x2e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b16      	cmp	r3, #22
 8000a9a:	d013      	beq.n	8000ac4 <setLedH+0x54>
 8000a9c:	e04b      	b.n	8000b36 <setLedH+0xc6>
	case RED:
		HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_ON);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4830      	ldr	r0, [pc, #192]	@ (8000b64 <setLedH+0xf4>)
 8000aa4:	f001 f863 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2104      	movs	r1, #4
 8000aac:	482d      	ldr	r0, [pc, #180]	@ (8000b64 <setLedH+0xf4>)
 8000aae:	f001 f85e 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	482b      	ldr	r0, [pc, #172]	@ (8000b64 <setLedH+0xf4>)
 8000ab8:	f001 f859 	bl	8001b6e <HAL_GPIO_WritePin>
		horState = RED;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <setLedH+0xf8>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	601a      	str	r2, [r3, #0]
		break;
 8000ac2:	e04b      	b.n	8000b5c <setLedH+0xec>
	case YEL:
		HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <setLedH+0xf4>)
 8000aca:	f001 f850 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_ON);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	4824      	ldr	r0, [pc, #144]	@ (8000b64 <setLedH+0xf4>)
 8000ad4:	f001 f84b 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2108      	movs	r1, #8
 8000adc:	4821      	ldr	r0, [pc, #132]	@ (8000b64 <setLedH+0xf4>)
 8000ade:	f001 f846 	bl	8001b6e <HAL_GPIO_WritePin>
		horState = YEL;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <setLedH+0xf8>)
 8000ae4:	2216      	movs	r2, #22
 8000ae6:	601a      	str	r2, [r3, #0]
		break;
 8000ae8:	e038      	b.n	8000b5c <setLedH+0xec>
	case GRN:
		HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2102      	movs	r1, #2
 8000aee:	481d      	ldr	r0, [pc, #116]	@ (8000b64 <setLedH+0xf4>)
 8000af0:	f001 f83d 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2104      	movs	r1, #4
 8000af8:	481a      	ldr	r0, [pc, #104]	@ (8000b64 <setLedH+0xf4>)
 8000afa:	f001 f838 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_ON);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2108      	movs	r1, #8
 8000b02:	4818      	ldr	r0, [pc, #96]	@ (8000b64 <setLedH+0xf4>)
 8000b04:	f001 f833 	bl	8001b6e <HAL_GPIO_WritePin>
		horState = GRN;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <setLedH+0xf8>)
 8000b0a:	2221      	movs	r2, #33	@ 0x21
 8000b0c:	601a      	str	r2, [r3, #0]
		break;
 8000b0e:	e025      	b.n	8000b5c <setLedH+0xec>
	case ALL:
		HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_ON);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <setLedH+0xf4>)
 8000b16:	f001 f82a 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_ON);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4811      	ldr	r0, [pc, #68]	@ (8000b64 <setLedH+0xf4>)
 8000b20:	f001 f825 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_ON);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <setLedH+0xf4>)
 8000b2a:	f001 f820 	bl	8001b6e <HAL_GPIO_WritePin>
		horState = ALL;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <setLedH+0xf8>)
 8000b30:	222c      	movs	r2, #44	@ 0x2c
 8000b32:	601a      	str	r2, [r3, #0]
		break;
 8000b34:	e012      	b.n	8000b5c <setLedH+0xec>
	default:
		HAL_GPIO_WritePin(red_h_GPIO_Port, red_h_Pin, LED_OFF);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2102      	movs	r1, #2
 8000b3a:	480a      	ldr	r0, [pc, #40]	@ (8000b64 <setLedH+0xf4>)
 8000b3c:	f001 f817 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_h_GPIO_Port, yel_h_Pin, LED_OFF);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2104      	movs	r1, #4
 8000b44:	4807      	ldr	r0, [pc, #28]	@ (8000b64 <setLedH+0xf4>)
 8000b46:	f001 f812 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_h_GPIO_Port, grn_h_Pin, LED_OFF);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <setLedH+0xf4>)
 8000b50:	f001 f80d 	bl	8001b6e <HAL_GPIO_WritePin>
		horState = NONE;
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <setLedH+0xf8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
		break;
 8000b5a:	bf00      	nop
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40010800 	.word	0x40010800
 8000b68:	200000f0 	.word	0x200000f0

08000b6c <setLedV>:

void setLedV(int color){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	switch(color){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b78:	d048      	beq.n	8000c0c <setLedV+0xa0>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b7e:	dc58      	bgt.n	8000c32 <setLedV+0xc6>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b21      	cmp	r3, #33	@ 0x21
 8000b84:	d02f      	beq.n	8000be6 <setLedV+0x7a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b21      	cmp	r3, #33	@ 0x21
 8000b8a:	dc52      	bgt.n	8000c32 <setLedV+0xc6>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0b      	cmp	r3, #11
 8000b90:	d003      	beq.n	8000b9a <setLedV+0x2e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b16      	cmp	r3, #22
 8000b96:	d013      	beq.n	8000bc0 <setLedV+0x54>
 8000b98:	e04b      	b.n	8000c32 <setLedV+0xc6>
	case RED:
		HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_ON);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	4830      	ldr	r0, [pc, #192]	@ (8000c60 <setLedV+0xf4>)
 8000ba0:	f000 ffe5 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	482d      	ldr	r0, [pc, #180]	@ (8000c60 <setLedV+0xf4>)
 8000baa:	f000 ffe0 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2140      	movs	r1, #64	@ 0x40
 8000bb2:	482b      	ldr	r0, [pc, #172]	@ (8000c60 <setLedV+0xf4>)
 8000bb4:	f000 ffdb 	bl	8001b6e <HAL_GPIO_WritePin>
		verState = RED;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <setLedV+0xf8>)
 8000bba:	220b      	movs	r2, #11
 8000bbc:	601a      	str	r2, [r3, #0]
		break;
 8000bbe:	e04b      	b.n	8000c58 <setLedV+0xec>
	case YEL:
		HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4826      	ldr	r0, [pc, #152]	@ (8000c60 <setLedV+0xf4>)
 8000bc6:	f000 ffd2 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_ON);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <setLedV+0xf4>)
 8000bd0:	f000 ffcd 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2140      	movs	r1, #64	@ 0x40
 8000bd8:	4821      	ldr	r0, [pc, #132]	@ (8000c60 <setLedV+0xf4>)
 8000bda:	f000 ffc8 	bl	8001b6e <HAL_GPIO_WritePin>
		verState = YEL;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <setLedV+0xf8>)
 8000be0:	2216      	movs	r2, #22
 8000be2:	601a      	str	r2, [r3, #0]
		break;
 8000be4:	e038      	b.n	8000c58 <setLedV+0xec>
	case GRN:
		HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2110      	movs	r1, #16
 8000bea:	481d      	ldr	r0, [pc, #116]	@ (8000c60 <setLedV+0xf4>)
 8000bec:	f000 ffbf 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	481a      	ldr	r0, [pc, #104]	@ (8000c60 <setLedV+0xf4>)
 8000bf6:	f000 ffba 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_ON);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2140      	movs	r1, #64	@ 0x40
 8000bfe:	4818      	ldr	r0, [pc, #96]	@ (8000c60 <setLedV+0xf4>)
 8000c00:	f000 ffb5 	bl	8001b6e <HAL_GPIO_WritePin>
		verState = GRN;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <setLedV+0xf8>)
 8000c06:	2221      	movs	r2, #33	@ 0x21
 8000c08:	601a      	str	r2, [r3, #0]
		break;
 8000c0a:	e025      	b.n	8000c58 <setLedV+0xec>
	case ALL:
		HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_ON);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <setLedV+0xf4>)
 8000c12:	f000 ffac 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_ON);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <setLedV+0xf4>)
 8000c1c:	f000 ffa7 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_ON);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	@ 0x40
 8000c24:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <setLedV+0xf4>)
 8000c26:	f000 ffa2 	bl	8001b6e <HAL_GPIO_WritePin>
		verState = ALL;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <setLedV+0xf8>)
 8000c2c:	222c      	movs	r2, #44	@ 0x2c
 8000c2e:	601a      	str	r2, [r3, #0]
		break;
 8000c30:	e012      	b.n	8000c58 <setLedV+0xec>
	default:
		HAL_GPIO_WritePin(red_v_GPIO_Port, red_v_Pin, LED_OFF);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <setLedV+0xf4>)
 8000c38:	f000 ff99 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yel_v_GPIO_Port, yel_v_Pin, LED_OFF);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <setLedV+0xf4>)
 8000c42:	f000 ff94 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(grn_v_GPIO_Port, grn_v_Pin, LED_OFF);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <setLedV+0xf4>)
 8000c4c:	f000 ff8f 	bl	8001b6e <HAL_GPIO_WritePin>
		verState = NONE;
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <setLedV+0xf8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
		break;
 8000c56:	bf00      	nop
	}
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010800 	.word	0x40010800
 8000c64:	200000f4 	.word	0x200000f4

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fc58 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f80c 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f892 	bl	8000d9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c78:	f000 f844 	bl	8000d04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <main+0x20>)
 8000c7e:	f001 fbd5 	bl	800242c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
//	  fsm_auto_hor();
	  fsm_run();
 8000c82:	f7ff fb23 	bl	80002cc <fsm_run>
 8000c86:	e7fc      	b.n	8000c82 <main+0x1a>
 8000c88:	200000f8 	.word	0x200000f8

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	@ 0x40
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2228      	movs	r2, #40	@ 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 ff52 	bl	8002b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 ff84 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cce:	f000 f8d5 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f9f2 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 f8c1 	bl	8000e7c <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3740      	adds	r7, #64	@ 0x40
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d2a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d38:	2209      	movs	r2, #9
 8000d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d48:	4813      	ldr	r0, [pc, #76]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d4a:	f001 fb1f 	bl	800238c <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d54:	f000 f892 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d66:	f001 fc9d 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d70:	f000 f884 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_TIM2_Init+0x94>)
 8000d82:	f001 fe75 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f876 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000f8 	.word	0x200000f8

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a28      	ldr	r2, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a22      	ldr	r2, [pc, #136]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xbc>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_h_Pin|yel_h_Pin|grn_h_Pin|red_v_Pin
 8000de0:	2200      	movs	r2, #0
 8000de2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8000de6:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <MX_GPIO_Init+0xc0>)
 8000de8:	f000 fec1 	bl	8001b6e <HAL_GPIO_WritePin>
                          |yel_v_Pin|grn_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000dec:	2200      	movs	r2, #0
 8000dee:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000df2:	481b      	ldr	r0, [pc, #108]	@ (8000e60 <MX_GPIO_Init+0xc4>)
 8000df4:	f000 febb 	bl	8001b6e <HAL_GPIO_WritePin>
                          |b_v_Pin|c_v_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red_h_Pin yel_h_Pin grn_h_Pin red_v_Pin
                           yel_v_Pin grn_v_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = red_h_Pin|yel_h_Pin|grn_h_Pin|red_v_Pin
 8000df8:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8000dfc:	60bb      	str	r3, [r7, #8]
                          |yel_v_Pin|grn_v_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <MX_GPIO_Init+0xc0>)
 8000e12:	f000 fd19 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_h_Pin b_h_Pin c_h_Pin d_v_Pin
                           e_v_Pin f_v_Pin g_v_Pin d_h_Pin
                           e_h_Pin f_h_Pin g_h_Pin a_v_Pin
                           b_v_Pin c_v_Pin */
  GPIO_InitStruct.Pin = a_h_Pin|b_h_Pin|c_h_Pin|d_v_Pin
 8000e16:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000e1a:	60bb      	str	r3, [r7, #8]
                          |e_v_Pin|f_v_Pin|g_v_Pin|d_h_Pin
                          |e_h_Pin|f_h_Pin|g_h_Pin|a_v_Pin
                          |b_v_Pin|c_v_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2302      	movs	r3, #2
 8000e26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0308 	add.w	r3, r7, #8
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <MX_GPIO_Init+0xc4>)
 8000e30:	f000 fd0a 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : sw0_Pin sw1_Pin sw2_Pin */
  GPIO_InitStruct.Pin = sw0_Pin|sw1_Pin|sw2_Pin;
 8000e34:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <MX_GPIO_Init+0xc0>)
 8000e4a:	f000 fcfd 	bl	8001848 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    buttonRead();
 8000e6c:	f7ff f988 	bl	8000180 <buttonRead>
    timerRun();
 8000e70:	f000 fada 	bl	8001428 <timerRun>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <Error_Handler+0x8>

08000e88 <set7SegH>:
	    {0, 0, 0, 0, 0, 0, 0}, //8
	    {0, 0, 0, 0, 1, 0, 0}, //9
		{1, 1, 1, 1, 1, 1, 1}  //ALL LED TURN OFF
};

void set7SegH(int num){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if (num >= 0 && num <= 9){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1e      	blt.n	8000ed4 <set7SegH+0x4c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	dc1b      	bgt.n	8000ed4 <set7SegH+0x4c>
		for (int state = 0; state < 7; state++){
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e014      	b.n	8000ecc <set7SegH+0x44>
			HAL_GPIO_WritePin(a_h_GPIO_Port, a_h_Pin << state, pinArr[num][state]);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <set7SegH+0x84>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	18c2      	adds	r2, r0, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4813      	ldr	r0, [pc, #76]	@ (8000f10 <set7SegH+0x88>)
 8000ec2:	f000 fe54 	bl	8001b6e <HAL_GPIO_WritePin>
		for (int state = 0; state < 7; state++){
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	dde7      	ble.n	8000ea2 <set7SegH+0x1a>
 8000ed2:	e017      	b.n	8000f04 <set7SegH+0x7c>
		}
	}
	else{
		for(int state = 0; state < 7; state++){ // Turn off
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e010      	b.n	8000efc <set7SegH+0x74>
			HAL_GPIO_WritePin(a_h_GPIO_Port, a_h_Pin << state, pinArr[10][state]);
 8000eda:	2201      	movs	r2, #1
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	b299      	uxth	r1, r3
 8000ee4:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <set7SegH+0x84>)
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	3346      	adds	r3, #70	@ 0x46
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <set7SegH+0x88>)
 8000ef2:	f000 fe3c 	bl	8001b6e <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){ // Turn off
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	ddeb      	ble.n	8000eda <set7SegH+0x52>
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000060 	.word	0x20000060
 8000f10:	40010c00 	.word	0x40010c00

08000f14 <set7SegV>:

void set7SegV(int num){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	if (num >= 0 && num <= 9){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db1e      	blt.n	8000f60 <set7SegV+0x4c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b09      	cmp	r3, #9
 8000f26:	dc1b      	bgt.n	8000f60 <set7SegV+0x4c>
		for (int state = 0; state < 7; state++){
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e014      	b.n	8000f58 <set7SegV+0x44>
			HAL_GPIO_WritePin(a_v_GPIO_Port, a_v_Pin << state, pinArr[num][state]);
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	b299      	uxth	r1, r3
 8000f38:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <set7SegV+0x84>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	18c2      	adds	r2, r0, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <set7SegV+0x88>)
 8000f4e:	f000 fe0e 	bl	8001b6e <HAL_GPIO_WritePin>
		for (int state = 0; state < 7; state++){
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	dde7      	ble.n	8000f2e <set7SegV+0x1a>
 8000f5e:	e017      	b.n	8000f90 <set7SegV+0x7c>
		}
	}
	else {
		for(int state = 0; state < 7; state++){ // Turn off
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e010      	b.n	8000f88 <set7SegV+0x74>
			HAL_GPIO_WritePin(a_v_GPIO_Port, a_v_Pin << state, pinArr[10][state]);
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	4a09      	ldr	r2, [pc, #36]	@ (8000f98 <set7SegV+0x84>)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4413      	add	r3, r2
 8000f76:	3346      	adds	r3, #70	@ 0x46
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <set7SegV+0x88>)
 8000f7e:	f000 fdf6 	bl	8001b6e <HAL_GPIO_WritePin>
		for(int state = 0; state < 7; state++){ // Turn off
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	ddeb      	ble.n	8000f66 <set7SegV+0x52>
		}
	}
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000060 	.word	0x20000060
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <scan7Seg>:


void scan7Seg (int state){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	state = state % 2;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	bfb8      	it	lt
 8000fb2:	425b      	neglt	r3, r3
 8000fb4:	607b      	str	r3, [r7, #4]
	switch (state){
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <scan7Seg+0x24>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d022      	beq.n	8001008 <scan7Seg+0x68>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 0);
		set7SegH(segment_buffer[1]);
		set7SegV(segment_buffer[3]);
		break;
	default:
		break;
 8000fc2:	e043      	b.n	800104c <scan7Seg+0xac>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	@ 0x80
 8000fc8:	4822      	ldr	r0, [pc, #136]	@ (8001054 <scan7Seg+0xb4>)
 8000fca:	f000 fdd0 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd4:	481f      	ldr	r0, [pc, #124]	@ (8001054 <scan7Seg+0xb4>)
 8000fd6:	f000 fdca 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe0:	481c      	ldr	r0, [pc, #112]	@ (8001054 <scan7Seg+0xb4>)
 8000fe2:	f000 fdc4 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fec:	4819      	ldr	r0, [pc, #100]	@ (8001054 <scan7Seg+0xb4>)
 8000fee:	f000 fdbe 	bl	8001b6e <HAL_GPIO_WritePin>
		set7SegH(segment_buffer[0]);
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <scan7Seg+0xb8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff46 	bl	8000e88 <set7SegH>
		set7SegV(segment_buffer[2]);
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <scan7Seg+0xb8>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff87 	bl	8000f14 <set7SegV>
		break;
 8001006:	e021      	b.n	800104c <scan7Seg+0xac>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	4811      	ldr	r0, [pc, #68]	@ (8001054 <scan7Seg+0xb4>)
 800100e:	f000 fdae 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001018:	480e      	ldr	r0, [pc, #56]	@ (8001054 <scan7Seg+0xb4>)
 800101a:	f000 fda8 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001024:	480b      	ldr	r0, [pc, #44]	@ (8001054 <scan7Seg+0xb4>)
 8001026:	f000 fda2 	bl	8001b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <scan7Seg+0xb4>)
 8001032:	f000 fd9c 	bl	8001b6e <HAL_GPIO_WritePin>
		set7SegH(segment_buffer[1]);
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <scan7Seg+0xb8>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff24 	bl	8000e88 <set7SegH>
		set7SegV(segment_buffer[3]);
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <scan7Seg+0xb8>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff65 	bl	8000f14 <set7SegV>
		break;
 800104a:	bf00      	nop
	}
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40010800 	.word	0x40010800
 8001058:	20000140 	.word	0x20000140

0800105c <updateSegment>:

void updateSegment(int a, int b, int c, int d){
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
	segment_buffer[0] = a;
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <updateSegment+0x30>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6013      	str	r3, [r2, #0]
	segment_buffer[1] = b;
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <updateSegment+0x30>)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	6053      	str	r3, [r2, #4]
	segment_buffer[2] = c;
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <updateSegment+0x30>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6093      	str	r3, [r2, #8]
	segment_buffer[3] = d;
 800107c:	4a03      	ldr	r2, [pc, #12]	@ (800108c <updateSegment+0x30>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	60d3      	str	r3, [r2, #12]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20000140 	.word	0x20000140

08001090 <updateSegment2Digits>:

void updateSegment2Digits(int firstNum, int secNum){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	segment_buffer[0] = firstNum / 10;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <updateSegment2Digits+0x70>)
 800109e:	fb82 1203 	smull	r1, r2, r2, r3
 80010a2:	1092      	asrs	r2, r2, #2
 80010a4:	17db      	asrs	r3, r3, #31
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <updateSegment2Digits+0x74>)
 80010aa:	6013      	str	r3, [r2, #0]
	segment_buffer[1] = firstNum % 10;
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <updateSegment2Digits+0x70>)
 80010b0:	fb83 2301 	smull	r2, r3, r3, r1
 80010b4:	109a      	asrs	r2, r3, #2
 80010b6:	17cb      	asrs	r3, r1, #31
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	1aca      	subs	r2, r1, r3
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <updateSegment2Digits+0x74>)
 80010c6:	605a      	str	r2, [r3, #4]
	segment_buffer[2] = secNum / 10;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <updateSegment2Digits+0x70>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <updateSegment2Digits+0x74>)
 80010d8:	6093      	str	r3, [r2, #8]
	segment_buffer[3] = secNum % 10;
 80010da:	6839      	ldr	r1, [r7, #0]
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <updateSegment2Digits+0x70>)
 80010de:	fb83 2301 	smull	r2, r3, r3, r1
 80010e2:	109a      	asrs	r2, r3, #2
 80010e4:	17cb      	asrs	r3, r1, #31
 80010e6:	1ad2      	subs	r2, r2, r3
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	1aca      	subs	r2, r1, r3
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <updateSegment2Digits+0x74>)
 80010f4:	60da      	str	r2, [r3, #12]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	66666667 	.word	0x66666667
 8001104:	20000140 	.word	0x20000140

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_MspInit+0x5c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <HAL_MspInit+0x5c>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_MspInit+0x5c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_MspInit+0x5c>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_MspInit+0x5c>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_MspInit+0x5c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_MspInit+0x60>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_MspInit+0x60>)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117c:	d113      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201c      	movs	r0, #28
 800119c:	f000 fb1d 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a0:	201c      	movs	r0, #28
 80011a2:	f000 fb36 	bl	8001812 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <MemManage_Handler+0x4>

080011cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <UsageFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f9d2 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM2_IRQHandler+0x10>)
 8001212:	f001 f957 	bl	80024c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000f8 	.word	0x200000f8

08001220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <set1>:
    flag2 = 0,
    flag3 = 0,
    flag4 = 0,
    flag5 = 0;

void set1(int timer){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    timer1 = timer / CYCLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <set1+0x2c>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1092      	asrs	r2, r2, #2
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a06      	ldr	r2, [pc, #24]	@ (800125c <set1+0x30>)
 8001244:	6013      	str	r3, [r2, #0]
    flag1 = 0;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <set1+0x34>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	66666667 	.word	0x66666667
 800125c:	20000150 	.word	0x20000150
 8001260:	20000164 	.word	0x20000164

08001264 <set2>:

void set2(int timer){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    timer2 = timer / CYCLE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <set2+0x2c>)
 8001270:	fb82 1203 	smull	r1, r2, r2, r3
 8001274:	1092      	asrs	r2, r2, #2
 8001276:	17db      	asrs	r3, r3, #31
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <set2+0x30>)
 800127c:	6013      	str	r3, [r2, #0]
    flag2 = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <set2+0x34>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	66666667 	.word	0x66666667
 8001294:	20000154 	.word	0x20000154
 8001298:	20000168 	.word	0x20000168

0800129c <set3>:

void set3(int timer){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    timer3 = timer / CYCLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <set3+0x2c>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1092      	asrs	r2, r2, #2
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a06      	ldr	r2, [pc, #24]	@ (80012cc <set3+0x30>)
 80012b4:	6013      	str	r3, [r2, #0]
    flag3 = 0;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <set3+0x34>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	66666667 	.word	0x66666667
 80012cc:	20000158 	.word	0x20000158
 80012d0:	2000016c 	.word	0x2000016c

080012d4 <set4>:

void set4(int timer){
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    timer4 = timer / CYCLE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <set4+0x2c>)
 80012e0:	fb82 1203 	smull	r1, r2, r2, r3
 80012e4:	1092      	asrs	r2, r2, #2
 80012e6:	17db      	asrs	r3, r3, #31
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <set4+0x30>)
 80012ec:	6013      	str	r3, [r2, #0]
    flag4 = 0;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <set4+0x34>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	66666667 	.word	0x66666667
 8001304:	2000015c 	.word	0x2000015c
 8001308:	20000170 	.word	0x20000170

0800130c <set5>:
void set5(int timer){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    timer5 = timer / CYCLE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <set5+0x2c>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1092      	asrs	r2, r2, #2
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a06      	ldr	r2, [pc, #24]	@ (800133c <set5+0x30>)
 8001324:	6013      	str	r3, [r2, #0]
    flag5 = 0;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <set5+0x34>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	66666667 	.word	0x66666667
 800133c:	20000160 	.word	0x20000160
 8001340:	20000174 	.word	0x20000174

08001344 <resetTimer>:

void resetTimer(int timer){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	switch(timer){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	2b04      	cmp	r3, #4
 8001352:	d830      	bhi.n	80013b6 <resetTimer+0x72>
 8001354:	a201      	add	r2, pc, #4	@ (adr r2, 800135c <resetTimer+0x18>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	08001371 	.word	0x08001371
 8001360:	0800137f 	.word	0x0800137f
 8001364:	0800138d 	.word	0x0800138d
 8001368:	0800139b 	.word	0x0800139b
 800136c:	080013a9 	.word	0x080013a9
	case 1:
		timer1 = 0;
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <resetTimer+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
		flag1 = 0;
 8001376:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <resetTimer+0xc0>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
		break;
 800137c:	e03a      	b.n	80013f4 <resetTimer+0xb0>
	case 2:
		timer2 = 0;
 800137e:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <resetTimer+0xc4>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
		flag2 = 0;
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <resetTimer+0xc8>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
		break;
 800138a:	e033      	b.n	80013f4 <resetTimer+0xb0>
	case 3:
		timer3 = 0;
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <resetTimer+0xcc>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
		flag3 = 0;
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <resetTimer+0xd0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
		break;
 8001398:	e02c      	b.n	80013f4 <resetTimer+0xb0>
	case 4:
		timer4 = 0;
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <resetTimer+0xd4>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
		flag4 = 0;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <resetTimer+0xd8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
        break; 
 80013a6:	e025      	b.n	80013f4 <resetTimer+0xb0>
    case 5:
        timer5 = 0; 
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <resetTimer+0xdc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
        flag5 = 0;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <resetTimer+0xe0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
		break;
 80013b4:	e01e      	b.n	80013f4 <resetTimer+0xb0>
	default:
		timer1 = 0;
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <resetTimer+0xbc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
		timer2 = 0;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <resetTimer+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
		timer3 = 0;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <resetTimer+0xcc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		timer4 = 0;
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <resetTimer+0xd4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
        timer5 = 0;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <resetTimer+0xdc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
		flag1 = 0;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <resetTimer+0xc0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
		flag2 = 0;
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <resetTimer+0xc8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
		flag3 = 0;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <resetTimer+0xd0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
		flag4 = 0;
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <resetTimer+0xd8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
        flag5 = 0;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <resetTimer+0xe0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
		break;
 80013f2:	bf00      	nop
	}
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000150 	.word	0x20000150
 8001404:	20000164 	.word	0x20000164
 8001408:	20000154 	.word	0x20000154
 800140c:	20000168 	.word	0x20000168
 8001410:	20000158 	.word	0x20000158
 8001414:	2000016c 	.word	0x2000016c
 8001418:	2000015c 	.word	0x2000015c
 800141c:	20000170 	.word	0x20000170
 8001420:	20000160 	.word	0x20000160
 8001424:	20000174 	.word	0x20000174

08001428 <timerRun>:

void timerRun(){
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    timer1--;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <timerRun+0x84>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	4a1e      	ldr	r2, [pc, #120]	@ (80014ac <timerRun+0x84>)
 8001434:	6013      	str	r3, [r2, #0]
    timer2--;
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <timerRun+0x88>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	4a1c      	ldr	r2, [pc, #112]	@ (80014b0 <timerRun+0x88>)
 800143e:	6013      	str	r3, [r2, #0]
    timer3--;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <timerRun+0x8c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <timerRun+0x8c>)
 8001448:	6013      	str	r3, [r2, #0]
    timer4--;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <timerRun+0x90>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <timerRun+0x90>)
 8001452:	6013      	str	r3, [r2, #0]
    timer5--; 
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <timerRun+0x94>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <timerRun+0x94>)
 800145c:	6013      	str	r3, [r2, #0]
    if (timer1 == 0){
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <timerRun+0x84>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <timerRun+0x44>
        flag1 = 1;
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <timerRun+0x98>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
    }
    if (timer2 == 0){
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <timerRun+0x88>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <timerRun+0x52>
        flag2 = 1;
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <timerRun+0x9c>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    }
    if (timer3 == 0){
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <timerRun+0x8c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <timerRun+0x60>
        flag3 = 1;
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <timerRun+0xa0>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    }
    if (timer4 == 0){
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <timerRun+0x90>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <timerRun+0x6e>
        flag4 = 1;
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <timerRun+0xa4>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
    }
    if (timer5 == 0){
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <timerRun+0x94>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <timerRun+0x7c>
        flag5 = 1; 
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <timerRun+0xa8>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
    }
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000150 	.word	0x20000150
 80014b0:	20000154 	.word	0x20000154
 80014b4:	20000158 	.word	0x20000158
 80014b8:	2000015c 	.word	0x2000015c
 80014bc:	20000160 	.word	0x20000160
 80014c0:	20000164 	.word	0x20000164
 80014c4:	20000168 	.word	0x20000168
 80014c8:	2000016c 	.word	0x2000016c
 80014cc:	20000170 	.word	0x20000170
 80014d0:	20000174 	.word	0x20000174

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff fea4 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014da:	490c      	ldr	r1, [pc, #48]	@ (800150c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014f0:	4c09      	ldr	r4, [pc, #36]	@ (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f001 fb29 	bl	8002b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fbb1 	bl	8000c68 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001510:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 8001514:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001518:	2000017c 	.word	0x2000017c

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f947 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fde4 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f95f 	bl	800182e <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f927 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200000b0 	.word	0x200000b0
 80015a4:	200000b8 	.word	0x200000b8
 80015a8:	200000b4 	.word	0x200000b4

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	@ (80015cc <HAL_IncTick+0x20>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	200000b8 	.word	0x200000b8
 80015cc:	20000178 	.word	0x20000178

080015d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	@ (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000178 	.word	0x20000178

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff fff0 	bl	80015d0 <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffe0 	bl	80015d0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000b8 	.word	0x200000b8

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4906      	ldr	r1, [pc, #24]	@ (80016c4 <__NVIC_EnableIRQ+0x34>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	@ (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	@ (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff90 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff2d 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff42 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff35 	bl	8001690 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b08b      	sub	sp, #44	@ 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	e161      	b.n	8001b20 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800185c:	2201      	movs	r2, #1
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8150 	bne.w	8001b1a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a97      	ldr	r2, [pc, #604]	@ (8001adc <HAL_GPIO_Init+0x294>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d05e      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 8001884:	4a95      	ldr	r2, [pc, #596]	@ (8001adc <HAL_GPIO_Init+0x294>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d875      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 800188a:	4a95      	ldr	r2, [pc, #596]	@ (8001ae0 <HAL_GPIO_Init+0x298>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d058      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 8001890:	4a93      	ldr	r2, [pc, #588]	@ (8001ae0 <HAL_GPIO_Init+0x298>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d86f      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 8001896:	4a93      	ldr	r2, [pc, #588]	@ (8001ae4 <HAL_GPIO_Init+0x29c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d052      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 800189c:	4a91      	ldr	r2, [pc, #580]	@ (8001ae4 <HAL_GPIO_Init+0x29c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d869      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018a2:	4a91      	ldr	r2, [pc, #580]	@ (8001ae8 <HAL_GPIO_Init+0x2a0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d04c      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 80018a8:	4a8f      	ldr	r2, [pc, #572]	@ (8001ae8 <HAL_GPIO_Init+0x2a0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d863      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018ae:	4a8f      	ldr	r2, [pc, #572]	@ (8001aec <HAL_GPIO_Init+0x2a4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d046      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 80018b4:	4a8d      	ldr	r2, [pc, #564]	@ (8001aec <HAL_GPIO_Init+0x2a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d85d      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d82a      	bhi.n	8001914 <HAL_GPIO_Init+0xcc>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d859      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <HAL_GPIO_Init+0x80>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001943 	.word	0x08001943
 80018cc:	0800191d 	.word	0x0800191d
 80018d0:	0800192f 	.word	0x0800192f
 80018d4:	08001971 	.word	0x08001971
 80018d8:	08001977 	.word	0x08001977
 80018dc:	08001977 	.word	0x08001977
 80018e0:	08001977 	.word	0x08001977
 80018e4:	08001977 	.word	0x08001977
 80018e8:	08001977 	.word	0x08001977
 80018ec:	08001977 	.word	0x08001977
 80018f0:	08001977 	.word	0x08001977
 80018f4:	08001977 	.word	0x08001977
 80018f8:	08001977 	.word	0x08001977
 80018fc:	08001977 	.word	0x08001977
 8001900:	08001977 	.word	0x08001977
 8001904:	08001977 	.word	0x08001977
 8001908:	08001977 	.word	0x08001977
 800190c:	08001925 	.word	0x08001925
 8001910:	08001939 	.word	0x08001939
 8001914:	4a76      	ldr	r2, [pc, #472]	@ (8001af0 <HAL_GPIO_Init+0x2a8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191a:	e02c      	b.n	8001976 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e029      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e024      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	3308      	adds	r3, #8
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e01f      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	330c      	adds	r3, #12
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e01a      	b.n	8001978 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194a:	2304      	movs	r3, #4
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e013      	b.n	8001978 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	611a      	str	r2, [r3, #16]
          break;
 8001962:	e009      	b.n	8001978 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	615a      	str	r2, [r3, #20]
          break;
 800196e:	e003      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x130>
          break;
 8001976:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	@ 0xff
 800197c:	d801      	bhi.n	8001982 <HAL_GPIO_Init+0x13a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_Init+0x13e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d802      	bhi.n	8001994 <HAL_GPIO_Init+0x14c>
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x152>
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	3b08      	subs	r3, #8
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	210f      	movs	r1, #15
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	6a39      	ldr	r1, [r7, #32]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a9 	beq.w	8001b1a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c8:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <HAL_GPIO_Init+0x2ac>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a49      	ldr	r2, [pc, #292]	@ (8001af4 <HAL_GPIO_Init+0x2ac>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b47      	ldr	r3, [pc, #284]	@ (8001af4 <HAL_GPIO_Init+0x2ac>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e0:	4a45      	ldr	r2, [pc, #276]	@ (8001af8 <HAL_GPIO_Init+0x2b0>)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <HAL_GPIO_Init+0x2b4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1e0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001b00 <HAL_GPIO_Init+0x2b8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3b      	ldr	r2, [pc, #236]	@ (8001b04 <HAL_GPIO_Init+0x2bc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1d8>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	492f      	ldr	r1, [pc, #188]	@ (8001af8 <HAL_GPIO_Init+0x2b0>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	492b      	ldr	r1, [pc, #172]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4927      	ldr	r1, [pc, #156]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4921      	ldr	r1, [pc, #132]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	491d      	ldr	r1, [pc, #116]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4917      	ldr	r1, [pc, #92]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4913      	ldr	r1, [pc, #76]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01f      	beq.n	8001b0c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e01f      	b.n	8001b1a <HAL_GPIO_Init+0x2d2>
 8001ada:	bf00      	nop
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10310000 	.word	0x10310000
 8001ae4:	10220000 	.word	0x10220000
 8001ae8:	10210000 	.word	0x10210000
 8001aec:	10120000 	.word	0x10120000
 8001af0:	10110000 	.word	0x10110000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4909      	ldr	r1, [pc, #36]	@ (8001b3c <HAL_GPIO_Init+0x2f4>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae96 	bne.w	800185c <HAL_GPIO_Init+0x14>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	372c      	adds	r7, #44	@ 0x2c
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e272      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8087 	beq.w	8001cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d00c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d112      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
 8001c08:	4b8c      	ldr	r3, [pc, #560]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c14:	d10b      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d06c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x12c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d168      	bne.n	8001cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e24c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x76>
 8001c38:	4b80      	ldr	r3, [pc, #512]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x98>
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7a      	ldr	r2, [pc, #488]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b78      	ldr	r3, [pc, #480]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a77      	ldr	r2, [pc, #476]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0xbc>
 8001c72:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a71      	ldr	r2, [pc, #452]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6e      	ldr	r2, [pc, #440]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a67      	ldr	r2, [pc, #412]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fc90 	bl	80015d0 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc8c 	bl	80015d0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e200      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe4>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc7c 	bl	80015d0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc78 	bl	80015d0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	@ 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1ec      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x10c>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d16:	4b49      	ldr	r3, [pc, #292]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
 8001d22:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1c0      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4939      	ldr	r1, [pc, #228]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b36      	ldr	r3, [pc, #216]	@ (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc31 	bl	80015d0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc2d 	bl	80015d0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1a1      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4927      	ldr	r1, [pc, #156]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_RCC_OscConfig+0x270>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc10 	bl	80015d0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc0c 	bl	80015d0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e180      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fbf0 	bl	80015d0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fbec 	bl	80015d0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e160      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f000 fa9c 	bl	8002350 <RCC_Delay>
 8001e18:	e01c      	b.n	8001e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff fbd6 	bl	80015d0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e28:	f7ff fbd2 	bl	80015d0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d908      	bls.n	8001e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e146      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	42420000 	.word	0x42420000
 8001e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b92      	ldr	r3, [pc, #584]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e9      	bne.n	8001e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a6 	beq.w	8001fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b8b      	ldr	r3, [pc, #556]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a87      	ldr	r2, [pc, #540]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]
 8001e7e:	4b85      	ldr	r3, [pc, #532]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b82      	ldr	r3, [pc, #520]	@ (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fb93 	bl	80015d0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff fb8f 	bl	80015d0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	@ 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e103      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_RCC_OscConfig+0x4c8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x312>
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6213      	str	r3, [r2, #32]
 8001ee0:	e02d      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x334>
 8001eea:	4b6a      	ldr	r3, [pc, #424]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a69      	ldr	r2, [pc, #420]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b67      	ldr	r3, [pc, #412]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a66      	ldr	r2, [pc, #408]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	e01c      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x356>
 8001f0c:	4b61      	ldr	r3, [pc, #388]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a60      	ldr	r2, [pc, #384]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	4b5e      	ldr	r3, [pc, #376]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x36e>
 8001f26:	4b5b      	ldr	r3, [pc, #364]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b58      	ldr	r3, [pc, #352]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a57      	ldr	r2, [pc, #348]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fb43 	bl	80015d0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fb3f 	bl	80015d0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0b1      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	4b4b      	ldr	r3, [pc, #300]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RCC_OscConfig+0x37e>
 8001f70:	e014      	b.n	8001f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb2d 	bl	80015d0 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb29 	bl	80015d0 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e09b      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	4b40      	ldr	r3, [pc, #256]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8087 	beq.w	80020c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d061      	beq.n	8002088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d146      	bne.n	800205a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b33      	ldr	r3, [pc, #204]	@ (800209c <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fafd 	bl	80015d0 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff faf9 	bl	80015d0 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e06d      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002002:	4b24      	ldr	r3, [pc, #144]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4921      	ldr	r1, [pc, #132]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	430b      	orrs	r3, r1
 8002026:	491b      	ldr	r1, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x4cc>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff facd 	bl	80015d0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff fac9 	bl	80015d0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e03d      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x46a>
 8002058:	e035      	b.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_RCC_OscConfig+0x4cc>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fab6 	bl	80015d0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fab2 	bl	80015d0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e026      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x498>
 8002086:	e01e      	b.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e019      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
 8002094:	40021000 	.word	0x40021000
 8002098:	40007000 	.word	0x40007000
 800209c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_OscConfig+0x500>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d0      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b67      	ldr	r3, [pc, #412]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4965      	ldr	r1, [pc, #404]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b8      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a58      	ldr	r2, [pc, #352]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800213a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a52      	ldr	r2, [pc, #328]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	494d      	ldr	r1, [pc, #308]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d040      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07f      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e073      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06b      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4936      	ldr	r1, [pc, #216]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff fa04 	bl	80015d0 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff fa00 	bl	80015d0 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e053      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d210      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4922      	ldr	r1, [pc, #136]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e032      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4916      	ldr	r1, [pc, #88]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	490e      	ldr	r1, [pc, #56]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002262:	f000 f821 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	490a      	ldr	r1, [pc, #40]	@ (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	4a09      	ldr	r2, [pc, #36]	@ (80022a0 <HAL_RCC_ClockConfig+0x1cc>)
 800227c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f962 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40022000 	.word	0x40022000
 8002298:	40021000 	.word	0x40021000
 800229c:	08002bb4 	.word	0x08002bb4
 80022a0:	200000b0 	.word	0x200000b0
 80022a4:	200000b4 	.word	0x200000b4

080022a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d002      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d003      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x36>
 80022d6:	e027      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	613b      	str	r3, [r7, #16]
      break;
 80022dc:	e027      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	fb03 f202 	mul.w	r2, r3, r2
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <HAL_RCC_GetSysClockFreq+0xa4>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	613b      	str	r3, [r7, #16]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	007a1200 	.word	0x007a1200
 8002344:	08002bc4 	.word	0x08002bc4
 8002348:	08002bd4 	.word	0x08002bd4
 800234c:	003d0900 	.word	0x003d0900

08002350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <RCC_Delay+0x34>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <RCC_Delay+0x38>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a5b      	lsrs	r3, r3, #9
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800236c:	bf00      	nop
  }
  while (Delay --);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	60fa      	str	r2, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f9      	bne.n	800236c <RCC_Delay+0x1c>
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	200000b0 	.word	0x200000b0
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e041      	b.n	8002422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe feda 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 fa56 	bl	800287c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d001      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e035      	b.n	80024b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_TIM_Base_Start_IT+0x90>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x4e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246e:	d004      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x4e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d111      	bne.n	800249e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b06      	cmp	r3, #6
 800248a:	d010      	beq.n	80024ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249c:	e007      	b.n	80024ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400

080024c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0202 	mvn.w	r2, #2
 80024f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f998 	bl	8002844 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f98b 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f99a 	bl	8002856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0204 	mvn.w	r2, #4
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f972 	bl	8002844 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f965 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f974 	bl	8002856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f94c 	bl	8002844 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f93f 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f94e 	bl	8002856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0210 	mvn.w	r2, #16
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2208      	movs	r2, #8
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f926 	bl	8002844 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f919 	bl	8002832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f928 	bl	8002856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fc1a 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa6f 	bl	8002b32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00c      	beq.n	8002678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8f8 	bl	8002868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00c      	beq.n	800269c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0220 	mvn.w	r2, #32
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa42 	bl	8002b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_ConfigClockSource+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0b4      	b.n	800282a <HAL_TIM_ConfigClockSource+0x186>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f8:	d03e      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0xd4>
 80026fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026fe:	f200 8087 	bhi.w	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002706:	f000 8086 	beq.w	8002816 <HAL_TIM_ConfigClockSource+0x172>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270e:	d87f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b70      	cmp	r3, #112	@ 0x70
 8002712:	d01a      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xa6>
 8002714:	2b70      	cmp	r3, #112	@ 0x70
 8002716:	d87b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b60      	cmp	r3, #96	@ 0x60
 800271a:	d050      	beq.n	80027be <HAL_TIM_ConfigClockSource+0x11a>
 800271c:	2b60      	cmp	r3, #96	@ 0x60
 800271e:	d877      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b50      	cmp	r3, #80	@ 0x50
 8002722:	d03c      	beq.n	800279e <HAL_TIM_ConfigClockSource+0xfa>
 8002724:	2b50      	cmp	r3, #80	@ 0x50
 8002726:	d873      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d058      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x13a>
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d86f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b30      	cmp	r3, #48	@ 0x30
 8002732:	d064      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	2b30      	cmp	r3, #48	@ 0x30
 8002736:	d86b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b20      	cmp	r3, #32
 800273a:	d060      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d867      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05c      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b10      	cmp	r3, #16
 8002746:	d05a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	e062      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	f000 f96a 	bl	8002a32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800276c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]
      break;
 8002776:	e04f      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	f000 f953 	bl	8002a32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279a:	609a      	str	r2, [r3, #8]
      break;
 800279c:	e03c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	461a      	mov	r2, r3
 80027ac:	f000 f8ca 	bl	8002944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2150      	movs	r1, #80	@ 0x50
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f921 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80027bc:	e02c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 f8e8 	bl	80029a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2160      	movs	r1, #96	@ 0x60
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f911 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80027dc:	e01c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8aa 	bl	8002944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2140      	movs	r1, #64	@ 0x40
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f901 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 80027fc:	e00c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 f8f8 	bl	80029fe <TIM_ITRx_SetConfig>
      break;
 800280e:	e003      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e000      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a2b      	ldr	r2, [pc, #172]	@ (800293c <TIM_Base_SetConfig+0xc0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x28>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x28>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a28      	ldr	r2, [pc, #160]	@ (8002940 <TIM_Base_SetConfig+0xc4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a20      	ldr	r2, [pc, #128]	@ (800293c <TIM_Base_SetConfig+0xc0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <TIM_Base_SetConfig+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c4:	d003      	beq.n	80028ce <TIM_Base_SetConfig+0x52>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <TIM_Base_SetConfig+0xc4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d108      	bne.n	80028e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <TIM_Base_SetConfig+0xc0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f023 0201 	bic.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]
  }
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400

08002944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 0201 	bic.w	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f023 030a 	bic.w	r3, r3, #10
 8002980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0210 	bic.w	r2, r3, #16
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	031b      	lsls	r3, r3, #12
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f043 0307 	orr.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b087      	sub	sp, #28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	021a      	lsls	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e041      	b.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a14      	ldr	r2, [pc, #80]	@ (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10c      	bne.n	8002afa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400

08002b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <__libc_init_array>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	2600      	movs	r6, #0
 8002b58:	4d0c      	ldr	r5, [pc, #48]	@ (8002b8c <__libc_init_array+0x38>)
 8002b5a:	4c0d      	ldr	r4, [pc, #52]	@ (8002b90 <__libc_init_array+0x3c>)
 8002b5c:	1b64      	subs	r4, r4, r5
 8002b5e:	10a4      	asrs	r4, r4, #2
 8002b60:	42a6      	cmp	r6, r4
 8002b62:	d109      	bne.n	8002b78 <__libc_init_array+0x24>
 8002b64:	f000 f81a 	bl	8002b9c <_init>
 8002b68:	2600      	movs	r6, #0
 8002b6a:	4d0a      	ldr	r5, [pc, #40]	@ (8002b94 <__libc_init_array+0x40>)
 8002b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b98 <__libc_init_array+0x44>)
 8002b6e:	1b64      	subs	r4, r4, r5
 8002b70:	10a4      	asrs	r4, r4, #2
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	d105      	bne.n	8002b82 <__libc_init_array+0x2e>
 8002b76:	bd70      	pop	{r4, r5, r6, pc}
 8002b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b7c:	4798      	blx	r3
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7ee      	b.n	8002b60 <__libc_init_array+0xc>
 8002b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b86:	4798      	blx	r3
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7f2      	b.n	8002b72 <__libc_init_array+0x1e>
 8002b8c:	08002bd8 	.word	0x08002bd8
 8002b90:	08002bd8 	.word	0x08002bd8
 8002b94:	08002bd8 	.word	0x08002bd8
 8002b98:	08002bdc 	.word	0x08002bdc

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr
